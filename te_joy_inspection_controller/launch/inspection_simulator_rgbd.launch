<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="mav_name" value="euroc_hex" />
  <!-- <arg name="loc" default="slam" /> --> <!-- okvis, rovio, slam, vicon -->
  <arg name="world_name" default="tum_lab" />
  <arg name="mav_mass" value="3.5" />

  <!-- load world model -->
  <include file="$(find te_simulator_resources)/launch/world.launch">
    <!-- tum_kitchen, powerplant, artificial -->
    <arg name="world" value="$(find te_simulator_resources)/worlds/$(arg world_name).world" />
    <arg name="mav_name" value="$(arg mav_name)" />
    <arg name="mav_model" value="$(find te_ultrasonic)/urdf/euroc_hex_ultrasonic_sensor.gazebo" />
  </include>



  <!-- start gazebo simulator and custom joystick -->
  <group ns="$(arg mav_name)">

  <!-- robot tf publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="20.0" />
  </node>
  <node pkg="tf" type="static_transform_publisher" name="static_transform_publisher" args="0 0 0 0 0 0 $(arg mav_name)/ground_truth $(arg mav_name)/base_link 100"/>


    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node_controller_only" respawn="true"
          clear_params="true" output="screen">
      <remap from="odometry" to="msf_core/odometry"/>
      <param name="control_interface/verbose" value="true"/>
      <rosparam file="$(find euroc_launch)/parameters/common/linear_mpc_neo.yaml"/>
      <param name="controller/mass" value="$(arg mav_mass)" />
      <param name="capability_group" value="Core"/>
    </node>
    <node name="PD_attitude_controller" pkg="mav_linear_mpc" type="PD_attitude_controller_node" respawn="true"
          clear_params="true" output="screen">
      <remap from="odometry" to="msf_core/odometry"/>
      <rosparam file="$(find mav_linear_mpc)/parameters/PD_attitude.yaml"/>
      <param name="capability_group" value="Core"/>
    </node>
    
    <!-- start vicon -->
    <include file="$(find te_navigation)/launch/algorithms/vicon.launch">
      <arg name="mav_name" value="$(arg mav_name)"/>
    </include>

    <!-- start sonar; For controlling the simulator with a joystick -->
    <include file="$(find te_collision_avoidance_controller)/launch/sim_ca_controller.launch" >
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="speed_up" value="1.5" />
      <arg name="speed_right" value="1.6" />
      <arg name="speed_forward" value="1.6" />
      <arg name="speed_yaw" value="1.05" />
      <arg name="sonar_radius" value="0.08" />
    </include>
    <!-- start surface detection controller -->
    <node name="te_joy_inspection_controller" pkg="te_joy_inspection_controller" type="controller_node">
      <remap from="command/pose" to="command/pose" />
      <remap from="estimated_transform" to="msf_core/pose" />   
      <remap from="plane" to="te_surface_detection/plane" />   
      <param name="speedUp" value="1.5" />
      <param name="speedRight" value="1.6" />
      <param name="speedForward" value="1.6" />
      <param name="speedYaw" value="1.05" />
    </node>
    
    <!-- start surface detection -->
    <node name="te_surface_detection" pkg="te_surface_detection" type="te_surface_detection">
      <param name="mavTFName" value="euroc_hex/ground_truth" />
      <param name="mavTFCameraName" value="euroc_hex/vi_sensor/ground_truth" />
    </node>

    <!-- start the simulation -->
    <node pkg="rosservice" type="rosservice" name="initialize"
          args="call --wait /gazebo/unpause_physics">
    </node>
    
  <!-- show recorded images -->
  <node name="image_view" pkg="image_view" type="image_view" args="image:=/$(arg mav_name)/vi_sensor/left/image_raw compressed" />


  </group>
</launch>
